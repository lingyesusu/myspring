<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dao.UserDao"><!-- 映射到哪个接口 -->
	<select id="getAll" resultType="com.entity.User" >
		select * from user
	</select>
	
	<insert id="add" parameterType="com.entity.User">
		insert into user(id,username,password,dept_id,age,name,status) values (#{id},#{username},#{password},#{dept_id},#{age},#{name},#{status});
	</insert>
	
	<select id="getById" parameterType="Integer" resultType="com.entity.User">
		select id,username,password,dept_id,age,name,status from user where id=#{id}
	</select>
	
	<delete id="delById" parameterType="Integer">
		delete from user where id=#{id}
	</delete>
	
	<update id="updateById" parameterType="com.entity.User">
		update user set username=#{username},password=#{password},dept_id=#{dept_id},age=#{age},name=#{name},status=#{status} where id=#{id}
	</update>
	
	<!-- 定义存储过程 -->
   
	
	<select id="callProcedure" statementType="CALLABLE" parameterType="java.util.HashMap" resultType="Integer">
           {call pag_add(
              #{p1,mode=IN,jdbcType=INTEGER},
              #{p2,mode=IN,jdbcType=INTEGER},
              #{p3,mode=OUT,jdbcType=INTEGER}
              
           )}    
       
    </select>
	
	<resultMap type="com.entity.User" id="records">
        <result property="username" column="username" jdbcType="NVARCHAR" javaType="String"/>
        <result property="password" column="password" jdbcType="NVARCHAR" javaType="String" />
        <result property="dept_id" column="dept_id" jdbcType="NVARCHAR" javaType="Integer"  />
        <result property="age" column="age" jdbcType="NVARCHAR" javaType="Integer" />
        <result property="id" column="id" jdbcType="INTEGER" javaType="Integer" />
        <result property="name" column="name" jdbcType="NVARCHAR" javaType="String" />
        <result property="status" column="status" jdbcType="NVARCHAR" javaType="Integer" />
        <collection property="roles" ofType="com.entity.User" select="com.dao.User_roleDao.User_roleMapper.getByUserId" column="{id=id}"><!-- 可以多列传值 -->
            <!--  扩展，多列的值传递过去，将多列的值封装map传递
			       column="{key1=column1,key2=column2}" 
			       fetchType="lazy":表示使用延迟加载
			       - lazy:延迟
			       - eager:立即-->
        </collection>
    </resultMap>
    
    <select id="callProcedureList" statementType="CALLABLE" resultType="com.entity.User" parameterType="map">         
         {call scList()}
    </select>
	
	<!-- 定义函数 -->
	<!-- <select id="callFunction" parameterType="map" statementType="CALLABLE">
	        {
	            #{p3,mode=OUT,jdbcType=NUMERIC}=call fun_add(
	                #{p1,mode=IN,jdbcType=NUMERIC},
	             #{p2,mode=IN,jdbcType=NUMERIC}
	            )
	        }
	</select> -->
	
	<!-- <sql id="">
			SELECT
				*
			FROM
				user_role ur
			LEFT JOIN role r ON r.id = ur.role_id
			LEFT JOIN role_permission rp ON rp.role_id = r.id
			LEFT JOIN permission p on p.id=rp.permission_id
			WHERE
				ur.user_id = 1;
	</sql>
	
	<resultMap type="com.entity.User" id="User">
		<result column="username" property="username"/>
		<result column="password" property=""/>
		<result column="" property=""/>
		<result column="" property=""/>
		<collection property="" javaType="">
			<result column="" property=""/>
			<result column="" property=""/>
			<collection property="" javaType="">
				<result column="" property=""/>
				<result column="" property=""/>
			</collection>
		</collection>
	</resultMap> -->
	
	<!-- <resultMap id="detailedBlogResultMap" type="Blog">
		<constructor>
			<idArg column="blog_id" javaType="int"/>
		</constructor>
		<result property="title" column="blog_title"/>
		<association property="author" column="blog_author_id" javaType=" Author">
			<id property="id" column="author_id"/>
			<result property="username" column="author_username"/>
			<result property="password" column="author_password"/>
			<result property="email" column="author_email"/>
			<result property="bio" column="author_bio"/>
			<result property="favouriteSection" column="author_favourite_section"/>
		</association>
		<collection property="posts" ofType="Post">
			<id property="id" column="post_id"/>
			<result property="subject" column="post_subject"/>
			<association property="author" column="post_author_id" javaType="Author"/>
			<collection property="comments" column="post_id" ofType=" Comment">
				<id property="id" column="comment_id"/>
			</collection>
			<collection property="tags" column="post_id" ofType=" Tag" >
				<id property="id" column="tag_id"/>
			</collection>
			<discriminator javaType="int" column="draft">
				<case value="1" resultType="DraftPost"/>
			</discriminator>
		</collection>
	</resultMap> -->

	<!-- <resultMap id="detailedBlogResultMap" type="Blog">
		<constructor>
			<idArg column="blog_id" javaType="int"/>
		</constructor>
		<result property="title" column="blog_title"/>
		<association property="author" column="blog_author_id" javaType=" Author">
			<id property="id" column="author_id"/>
			<result property="username" column="author_username"/>
			<result property="password" column="author_password"/>
			<result property="email" column="author_email"/>
			<result property="bio" column="author_bio"/>
			<result property="favouriteSection" column="author_favourite_section"/>
		</association>
		<collection property="posts" ofType="Post">
			<id property="id" column="post_id"/>
			<result property="subject" column="post_subject"/>
			<association property="author" column="post_author_id" javaType="Author"/>
			<collection property="comments" column="post_id" ofType=" Comment">
				<id property="id" column="comment_id"/>
			</collection>
			<collection property="tags" column="post_id" ofType=" Tag" >
				<id property="id" column="tag_id"/>
			</collection>
			<discriminator javaType="int" column="draft">
				<case value="1" resultType="DraftPost"/>
			</discriminator>
		</collection>
	</resultMap> -->
	
</mapper>
